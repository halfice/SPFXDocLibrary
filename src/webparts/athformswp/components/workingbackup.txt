import * as React from 'react';
import styles from './Athformswp.module.scss';
import { IAthformswpProps } from './IAthformswpProps';
import { escape } from '@microsoft/sp-lodash-subset';
import { SPComponentLoader } from '@microsoft/sp-loader';
import { Promise } from 'es6-promise';
import * as lodash from 'lodash';
import { SPHttpClient } from '@microsoft/sp-http';
import { default as pnp, ItemAddResult, Web, ReorderingRuleMatchType, RoleDefinitionBindings } from "sp-pnp-js";
import { Breadcrumb, IBreadcrumbItem } from 'office-ui-fabric-react/lib/Breadcrumb';
import { Label } from 'office-ui-fabric-react/lib/Label';
import { Icon } from 'office-ui-fabric-react/lib/Icon';
import { TextField } from 'office-ui-fabric-react/lib/TextField';
import { Toggle } from 'office-ui-fabric-react/lib/Toggle';
import { Fabric } from 'office-ui-fabric-react/lib/Fabric';
import { DetailsList, DetailsListLayoutMode, Selection, SelectionMode, IColumn } from 'office-ui-fabric-react/lib/DetailsList';
import { MarqueeSelection } from 'office-ui-fabric-react/lib/MarqueeSelection';
import { mergeStyleSets } from 'office-ui-fabric-react/lib/Styling';



export default class Athformswp extends React.Component<IAthformswpProps, {}> {
  public state: IAthformswpProps;
  constructor(props, context) {
    super(props);
    this.state = {
      spHttpClient: this.props.spHttpClient,
      description: "",
      SiteUrl: this.props.SiteUrl,
      FolderList: [],
      LibraryName: this.props.LibraryName,
      BreaCrumArray: [],
      FolderColumns: [],
      _items: [],
      FlagStageForBreadCrum: 0,


    }
    this.gettheFolders = this.gettheFolders.bind(this);
    this._onItemInvoked2 = this._onItemInvoked2.bind(this);
  };



  public gettheFolders(folderurl) {
    var NewISiteUrl = this.props.SiteUrl;
    var NewSiteUrl = NewISiteUrl.replace("/SitePages", "");
    let webx = new Web(NewSiteUrl);
    var CheckCurrentNumberNavigation = this.state.FlagStageForBreadCrum;
    var Arraysx = [];
    var Arraysx1 = [];
    var counterlist = 1;
    webx.getFolderByServerRelativeUrl(folderurl)
      .expand("Folders, Files").get().then(r => {
        r.Folders.forEach(item => {
          var NewData1 = {
            text: item.Name,
            key: item.ServerRelativeUrl,
            onClick: this._onBreadcrumbItemClicked
          }
          var FinalName="234"+counterlist;
          var NewData = {
            key: counterlist,
            name: FinalName,
            "DocName": "serf",
            index: 1,
            id: counterlist,

          }
          if (item.Name != "Forms") {
            if (CheckCurrentNumberNavigation > 1) {
              Arraysx.push(NewData1);
            }
            Arraysx1.push(NewData);
            counterlist++;
          }
          
        })
        r.Files.forEach(item => {
        })
        this.setState({
          FolderList: Arraysx,
          _items: Arraysx1,

        });
      });


  }


  public gettheFoldersInner(event: any): void {
    var folderurl = event.target.id;
    var NewISiteUrl = this.props.SiteUrl;
    var NewSiteUrl = NewISiteUrl.replace("/SitePages", "");
    let webx = new Web(NewSiteUrl);
    var Arraysx = [];
    webx.getFolderByServerRelativeUrl(folderurl)
      .expand("Folders, Files").get().then(r => {
        r.Folders.forEach(item => {

        })
        r.Files.forEach(item => {
          console.log(item.ServerRelativeUrl);
        })

      });



  }

  public componentDidMount() {
    this.fillmonitorcolumns();
    this.gettheFolders(this.props.LibraryName)
  }

  public gettheFoldersInner1() {
  }

  private _onBreadcrumbItemClicked = (ev: React.MouseEvent<HTMLElement>, item: IBreadcrumbItem): void => {
    //console.log(`Breadcrumb item with key "${item.key}" has been clicked.`);
    //s  this.gettheFoldersInner(item.key);
  };

  /* List View Work  Start */
  public fillmonitorcolumns() {
    var Tempcolumns = [];
    var counter = 1;
      var newData = {
        key: "DocName",
        name: "DocName",
        fieldName: "DocName",
        minWidth: 20,
        maxWidth: 200,
        isResizable: true,
      }
      Tempcolumns.push(newData);
      counter++;

    this.setState({
      FolderColumns: Tempcolumns,
    });
  }

  private _onItemInvoked2(item: any): void {



  }



  /* List View Work End */



  public render(): React.ReactElement<IAthformswpProps> {
    let ArrayItems={Namek:"Namek",Value:"sdf"};
    


    /*List work Inside Render */
    function _renderItemColumnMonitor(item: any, index: number, column: IColumn) {
    }

    /* List Work Inside Render End */


    if (this.state.FolderList.length > 0) {

      var ProjectOptions = this.state.FolderList.map(function (item, i) {
        return <div  >
          <div className={styles.foldersdiv}><a id={item.key} onClick={this.gettheFoldersInner.bind(this)} ><img src="https://cdn.onlinewebfonts.com/svg/img_47793.png" className={styles.imgclass} /></a>
          </div><div className={styles.foldersdivtext}><a id={item.key} onClick={this.gettheFoldersInner.bind(this)} >{item["text"]}</a></div></div>
      }.bind(this));
    }

   

    const columns: IColumn[] = [
      {
      key: 'Title',
      name: 'Title',
      fieldName: 'Title',
      minWidth: 50
  }
];

  let _items: any[] = [{Title: "TestTitle"}];



    return (

      <div >
        <div>

          <Breadcrumb
            items={this.state.FolderList}
            ariaLabel={'Breadcrumb with no maxDisplayedItems'}
          />

        </div>

        <div>
          <DetailsList
            items={this.state._items}
            columns={this.state.FolderColumns}
            setKey="set"
            layoutMode={DetailsListLayoutMode.fixedColumns}
            selectionPreservedOnEmptyClick={true}
            ariaLabelForSelectionColumn="Toggle selection"
            ariaLabelForSelectAllCheckbox="Toggle selection for all items"
            onItemInvoked={this._onItemInvoked2}

          />

        </div>

      </div>



    );
  }
}

