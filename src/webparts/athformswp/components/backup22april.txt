import * as React from 'react';
import styles from './Athformswp.module.scss';
import { IAthformswpProps } from './IAthformswpProps';
import { escape } from '@microsoft/sp-lodash-subset';
import { SPComponentLoader } from '@microsoft/sp-loader';
import { Promise } from 'es6-promise';
import * as lodash from 'lodash';
import { SPHttpClient } from '@microsoft/sp-http';
import { default as pnp, ItemAddResult, Web, ReorderingRuleMatchType, RoleDefinitionBindings } from "sp-pnp-js";
import { Breadcrumb, IBreadcrumbItem } from 'office-ui-fabric-react/lib/Breadcrumb';
import { Label } from 'office-ui-fabric-react/lib/Label';
import { Icon } from 'office-ui-fabric-react/lib/Icon';
import { TextField } from 'office-ui-fabric-react/lib/TextField';
import { Toggle } from 'office-ui-fabric-react/lib/Toggle';
import { Fabric } from 'office-ui-fabric-react/lib/Fabric';
import { DetailsList, DetailsListLayoutMode, Selection, SelectionMode, IColumn } from 'office-ui-fabric-react/lib/DetailsList';
import { MarqueeSelection } from 'office-ui-fabric-react/lib/MarqueeSelection';
import { mergeStyleSets } from 'office-ui-fabric-react/lib/Styling';

export default class Athformswp extends React.Component<IAthformswpProps, {}> {
  public state: IAthformswpProps;
  constructor(props, context) {
    super(props);
    this.state = {
      spHttpClient: this.props.spHttpClient,
      description: "",
      SiteUrl: this.props.SiteUrl,
      FolderList: [],
      LibraryName: this.props.LibraryName,
      BreaCrumArray:[],
      FolderColumns:[],
      ArrayItems:[],      

    }
    this.gettheFolders = this.gettheFolders.bind(this);
    this._onItemInvoked2 = this._onItemInvoked2.bind(this);
  };



  public gettheFolders(folderurl) {
    //"https://arabtec.sharepoint.com/sites/ATH/";
    var NewISiteUrl = this.props.SiteUrl;
    var NewSiteUrl = NewISiteUrl.replace("/SitePages", "");
    let webx = new Web(NewSiteUrl);
    var Arraysx = [];
    webx.getFolderByServerRelativeUrl(folderurl)
      .expand("Folders, Files").get().then(r => {
        r.Folders.forEach(item => {
          //this.gettheFolders(item.ServerRelativeUrl);
          var NewData1 = {
            //urltoInner: item.ServerRelativeUrl,
            //text: item.Name,
            //key: 'Folder',
            //onClick: this._onBreadcrumbItemClicked
            text: item.Name,
            key: item.ServerRelativeUrl,
            onClick: this._onBreadcrumbItemClicked
          }
          if (item.Name != "Forms") {
            Arraysx.push(NewData1);
          }



          this.state.FolderList.push({
            text: item.Name,
            key: item.Name,
            onClick: this._onBreadcrumbItemClicked
            // isCurrentItem: !this.props.context.pageContext.list.serverRelativeUrl
          });

        })
        r.Files.forEach(item => {
          console.log(item.ServerRelativeUrl);
        })
        this.setState({
          FolderList: Arraysx,

        });
      });



  }


  public gettheFoldersInner(event: any): void {
    var folderurl=event.target.id;
    var NewISiteUrl = this.props.SiteUrl;
    var NewSiteUrl = NewISiteUrl.replace("/SitePages", "");
    let webx = new Web(NewSiteUrl);
    var Arraysx = [];
    webx.getFolderByServerRelativeUrl(folderurl)
      .expand("Folders, Files").get().then(r => {
        r.Folders.forEach(item => {
         

        })
        r.Files.forEach(item => {
          console.log(item.ServerRelativeUrl);
        })
        
      });



  }

  public componentDidMount() {
    //    alert(this.props.LibraryName);
    this.gettheFolders(this.props.LibraryName)
  }


  public gettheFoldersInner1(){
  }
  private _onBreadcrumbItemClicked = (ev: React.MouseEvent<HTMLElement>, item: IBreadcrumbItem): void => {
    //console.log(`Breadcrumb item with key "${item.key}" has been clicked.`);
  //s  this.gettheFoldersInner(item.key);
  };

 /* List View Work  Start */
 public fillmonitorcolumnsForFolder() {
  var Tempcolumns = [];
  var ONMColus = [".", "Name", ];
  for (var i = 0; i < ONMColus.length; i++) {
    var newData = {
      key: ONMColus[i],
      name: ONMColus[i],
      fieldName: ONMColus[i],
      minWidth: 0,
      maxWidth: 0,
      isResizable: true,
      ariaLabel: 'Operations for name',
      headerClassName: 'DetailsListExample-header--FileIcon',
    }
    Tempcolumns.push(newData);
  }

  this.setState({    
    FolderColumns: Tempcolumns,
  });
}

private _onItemInvoked2(item: any): void {
 


}



/* List View Work End */



  public render(): React.ReactElement<IAthformswpProps> {

    /*List work Inside Render */
    function _renderItemColumnMonitor(item: any, index: number, column: IColumn) {
    }

    /* List Work Inside Render End */


    if (this.state.FolderList.length > 0) {

      var ProjectOptions = this.state.FolderList.map(function (item, i) {
        return <div  >
          <div className={styles.foldersdiv}><a id={item.key} onClick={this.gettheFoldersInner.bind(this)} ><img src="https://cdn.onlinewebfonts.com/svg/img_47793.png" className={styles.imgclass} /></a>
          </div><div className={styles.foldersdivtext}><a id={item.key} onClick={this.gettheFoldersInner.bind(this)} >{item["text"]}</a></div></div>
      }.bind(this));
    }


   







    





    return (

      <div >
        <div>
          <Breadcrumb
            items={this.state.FolderList}
            ariaLabel={'Breadcrumb with no maxDisplayedItems'}
          />

        </div>

        <div>
        <DetailsList
              items={this.state.ArrayItems}
              columns={this.state.FolderColumns}
              onRenderItemColumn={_renderItemColumnMonitor}
              setKey="set"
              layoutMode={DetailsListLayoutMode.justified}
              selectionPreservedOnEmptyClick={true}
              ariaLabelForSelectionColumn="Toggle selection"
              ariaLabelForSelectAllCheckbox="Toggle selection for all items"
              onItemInvoked={this._onItemInvoked2}

            />

        </div>

      </div>



    );
  }
}

